{"version":3,"sources":["images/sparky.jpg","images/github.png","images/twitter.svg","images/linkedin.svg","images/medium.png","images/telegram.svg","views/home.js","views/content.js","components/header.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","className","class","src","require","alt","id","href","target","Component","Header","to","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4KAAAA,EAAOC,QAAU,IAA0B,oC,kFCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,+ICGtBC,G,uLAEjB,OACE,yBAAKC,UAAU,kBACb,6BAASC,MAAM,eACb,yBACEC,IAAKC,EAAQ,IACbC,IAAI,2BACJH,MAAM,WAER,yBAAKA,MAAM,YACT,oCAEE,0BAAMI,GAAG,OAAT,KAFF,KAE4B,KAE5B,6BACA,iDACA,6BACA,uBAAGJ,MAAM,cAAT,YAEE,0BAAMA,MAAM,YAAZ,YAEF,2DACA,uDACA,6BACA,uBAAGA,MAAM,cAAT,OAEE,0BAAMA,MAAM,YAAZ,qBAEF,2BACG,IADH,IAEG,0BAAMA,MAAM,cAAZ,aAFH,aAEuD,OAI3D,6BAASA,MAAM,kBACb,yBAAKA,MAAM,gBACT,iFACA,6BACA,uBAAGA,MAAM,QAAT,y0BAeE,6BACA,uBAAGK,KAAK,oBAAoBC,OAAO,SAASF,GAAG,UAA/C,kB,GAvDoBG,c,SCCGA,Y,OCmBtBC,G,MAnBA,WACb,OACE,yBAAKT,UAAU,iBACb,wBAAIK,GAAG,QAAP,sBACA,wBAAIL,UAAU,SACZ,wBAAIA,UAAU,SACZ,kBAAC,IAAD,CAAMU,GAAG,KAAT,aCgDKC,G,MAxDA,WACb,OACE,6BAASV,MAAM,+BACb,wBAAII,GAAG,QAAP,sBACA,wBAAIJ,MAAM,SACR,wBAAIA,MAAM,SACR,uBAAGK,KAAK,qCACN,yBACEL,MAAM,aACNC,IAAKC,EAAQ,IACbC,IAAI,gBAKV,wBAAIH,MAAM,SACR,uBAAGK,KAAK,qCACN,yBACEL,MAAM,aACNC,IAAKC,EAAQ,IACbC,IAAI,cAIV,wBAAIH,MAAM,SACR,uBAAGK,KAAK,8CACN,yBACEL,MAAM,aACNC,IAAKC,EAAQ,IACbC,IAAI,eAIV,wBAAIH,MAAM,SACR,uBAAGK,KAAK,yCACN,yBACEL,MAAM,oBACNC,IAAKC,EAAQ,IACbC,IAAI,aAIV,wBAAIH,MAAM,SACR,uBAAGK,KAAK,sCACN,yBACEL,MAAM,aACNC,IAAKC,EAAQ,IACbC,IAAI,mB,aC5BHQ,MAZf,WACE,OACE,kBAAC,IAAD,CAAQZ,UAAU,OAChB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAWhB,IAGjC,kBAAC,EAAD,QCJciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.264a3976.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sparky.bd75899c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/github.8a116e0a.png\";","module.exports = __webpack_public_path__ + \"static/media/twitter.4f41a984.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.ab46037f.svg\";","module.exports = __webpack_public_path__ + \"static/media/medium.57c7706f.png\";","module.exports = __webpack_public_path__ + \"static/media/telegram.a1994736.svg\";","import React, { Component } from \"react\";\nimport \"../styles/home.css\";\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div className=\"home_container\">\n        <section class=\"heroSection\">\n          <img\n            src={require(\"../images/sparky.jpg\")}\n            alt=\"Sparky Brown Evangelista\"\n            class=\"sparky\"\n          />\n          <div class=\"heroText\">\n            <h1>\n              Spark\n              <span id=\"dot\">.</span> y{\" \"}\n            </h1>\n            <br />\n            <h3>/'spärkē/</h3>\n            <br />\n            <p class=\"definition\">\n              adjective\n              <span class=\"language\">British</span>\n            </p>\n            <p>1. lively and high-spirited.</p>\n            <p>\"His sparky personality\"</p>\n            <br />\n            <p class=\"definition\">\n              noun\n              <span class=\"language\">Informal British</span>\n            </p>\n            <p>\n              {\" \"}\n              A<span class=\"crossedout\">Electrian</span> Developer{\" \"}\n            </p>\n          </div>\n        </section>\n        <section class=\"aboutmeSection\">\n          <div class=\"aboutme-text\">\n            <h1>Yes you guessed it right, my real name is Sparky.</h1>\n            <br />\n            <p class=\"text\">\n              I am a senior in Queens College studying Computer Science and\n              co-founder of CollabTrade. I love the art of developing and\n              creating things from scratch and being able to solve complex\n              problems. I am fueled with passion by innovation and ground\n              breaking technologies in hopes that I get to work them someday. I\n              currently intern at NYC Department of Citywide Administrative\n              Services (DCAS) as a Web Developer where I maintain both their\n              internet and intranet sites using Teamsite and Umbraco CMS. I have\n              been apart of the redesign of both sites to make them mobile\n              friendly and accessible, ensuring there are no barriers that\n              prevent interaction with, or access to, the sites by people with\n              disabilities. I am actively searching for a new intern or full\n              time position as a Full Stack Developer to continue my progress in\n              learning new things.\n              <br />\n              <a href=\"../techResume.pdf\" target=\"_blank\" id=\"resume\">\n                Resume\n              </a>\n            </p>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"../styles/content.css\";\n\n//this page is going to hold all of my medium blogs and youtube videos\nexport default class Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"content_container\">\n        <section className=\"youtube_content\">\n          Youtube videos go here\n          <div\n            class=\"g-ytsubscribe\"\n            data-channelid=\"UCwSKlD8oNKTnQ19Tbe5stUg\"\n            data-layout=\"default\"\n            data-theme=\"dark\"\n            data-count=\"default\"\n          ></div>\n        </section>\n        <section className=\"medium_content\">\n          <div>\n            <p>Medium blogs go here</p>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../styles/header.css\";\n\nconst Header = () => {\n  return (\n    <div className=\"headerSection\">\n      <li id=\"name\">Sparky Evangelista</li>\n      <ul className=\"gotos\">\n        <li className=\"items\">\n          <Link to=\"/\">Home</Link>\n        </li>\n        {/* <li className=\"items\">\n          <Link to=\"/content\">Content</Link>\n        </li>\n        <li className=\"items\">\n          <Link to=\"/projects\">Projects</Link>\n        </li> */}\n      </ul>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"../styles/footer.css\";\nconst Footer = () => {\n  return (\n    <section class=\"footerSection headerSection\">\n      <li id=\"name\">Sparky Evangelista</li>\n      <ul class=\"gotos\">\n        <li class=\"items\">\n          <a href=\"https://github.com/Sparkadelic177\">\n            <img\n              class=\"item-image\"\n              src={require(\"../images/github.png\")}\n              alt=\"instagram\"\n            />\n          </a>\n        </li>\n\n        <li class=\"items\">\n          <a href=\"https://twitter.com/sparkyBrown_E\">\n            <img\n              class=\"item-image\"\n              src={require(\"../images/twitter.svg\")}\n              alt=\"twitter\"\n            />\n          </a>\n        </li>\n        <li class=\"items\">\n          <a href=\"https://linkedin.com/in/sparkyevangelista/\">\n            <img\n              class=\"item-image\"\n              src={require(\"../images/linkedin.svg\")}\n              alt=\"linkedin\"\n            />\n          </a>\n        </li>\n        <li class=\"items\">\n          <a href=\"https://medium.com/@sparkyevangelista\">\n            <img\n              class=\"item-image medium\"\n              src={require(\"../images/medium.png\")}\n              alt=\"medium\"\n            />\n          </a>\n        </li>\n        <li class=\"items\">\n          <a href=\"mailto:sparkyevangelista@gmail.com\">\n            <img\n              class=\"item-image\"\n              src={require(\"../images/telegram.svg\")}\n              alt=\"telegram\"\n            />\n          </a>\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Home from \"../src/views/home\";\nimport Content from \"../src/views/content\";\nimport Projects from \"../src/views/projects\";\nimport Header from \"./components/header\";\nimport Footer from \"./components/footer\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router className=\"App\">\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n      {/* <Route exact path=\"/content\" component={Content} /> */}\n      {/* <Route exact path=\"/projects\" component={Projects} /> */}\n      <Footer />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}